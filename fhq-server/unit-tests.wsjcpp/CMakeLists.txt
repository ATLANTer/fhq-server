# Automaticly generated by wsjcpp@v0.0.1
cmake_minimum_required(VERSION 3.0)

project(unit-tests)

if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(MACOSX TRUE)
endif()

set(CMAKE_CXX_STANDARD 11)
set(EXECUTABLE_OUTPUT_PATH ${unit-tests_SOURCE_DIR})

set (WSJCPP_LIBRARIES "")
set (WSJCPP_INCLUDE_DIRS "")
set (WSJCPP_SOURCES "")

# wsjcpp-levenshtein:v0.0.1
list (APPEND WSJCPP_INCLUDE_DIRS "../src.wsjcpp/wsjcpp_levenshtein/")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_levenshtein/wsjcpp_levenshtein.cpp")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_levenshtein/wsjcpp_levenshtein.h")

# wsjcpp-hashes:v0.0.1
list (APPEND WSJCPP_INCLUDE_DIRS "../src.wsjcpp/wsjcpp_hashes/")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_hashes/md5.cpp")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_hashes/md5.h")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_hashes/smallsha1.h")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_hashes/smallsha1.cpp")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_hashes/wsjcpp_hashes.cpp")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_hashes/wsjcpp_hashes.h")

# wsjcpp-core:v0.0.4
list (APPEND WSJCPP_INCLUDE_DIRS "../src.wsjcpp/wsjcpp_core/")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_core/wsjcpp_core.cpp")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_core/wsjcpp_core.h")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_core/wsjcpp_unit_tests.cpp")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_core/wsjcpp_unit_tests.h")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_core/wsjcpp_unit_tests_main.cpp")

# nlohmann/json:v3.7.3
list (APPEND WSJCPP_INCLUDE_DIRS "../src.wsjcpp/nlohmann_json/")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/nlohmann_json/json.hpp")

# fhq-server:v0.2.23
list (APPEND WSJCPP_INCLUDE_DIRS "../src")
list (APPEND WSJCPP_SOURCES "../src/core/fallen.cpp")
list (APPEND WSJCPP_SOURCES "../src/core/fallen.h")
list (APPEND WSJCPP_SOURCES "../src/validators/validators.h")
list (APPEND WSJCPP_SOURCES "../src/validators/validators.cpp")
list (APPEND WSJCPP_SOURCES "../src/core/storages.h")
list (APPEND WSJCPP_SOURCES "../src/core/storages.cpp")
list (APPEND WSJCPP_SOURCES "../src/core/parser_ip_api_com.h")
list (APPEND WSJCPP_SOURCES "../src/core/parser_ip_api_com.cpp")
list (APPEND WSJCPP_SOURCES "../src/utils/utils_static_analizing_text.cpp")
list (APPEND WSJCPP_SOURCES "../src/utils/utils_static_analizing_text.h")
list (APPEND WSJCPP_SOURCES "../src/core/jobs_pool.h")
list (APPEND WSJCPP_SOURCES "../src/core/jobs_pool.cpp")
list (APPEND WSJCPP_SOURCES "../src/utils/utils_merge_text.cpp")
list (APPEND WSJCPP_SOURCES "../src/utils/utils_merge_text.h")
list (APPEND WSJCPP_SOURCES "../src/storages/mysql/mysql_storage.h")
list (APPEND WSJCPP_SOURCES "../src/storages/mysql/mysql_storage.cpp")

# wsjcpp-validators:v0.0.3
list (APPEND WSJCPP_INCLUDE_DIRS "../src.wsjcpp/wsjcpp_validators/")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_validators/wsjcpp_validators.h")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_validators/wsjcpp_validators.cpp")

# unit-tests
list (APPEND WSJCPP_INCLUDE_DIRS "src")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_validators.h")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_validators.cpp")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_merge_text.h")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_merge_text.cpp")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_parser_ip_api_com.h")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_parser_ip_api_com.cpp")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_jobs_pool.h")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_jobs_pool.cpp")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_static_analizing_text.h")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_static_analizing_text.cpp")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_storage_updates.h")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_storage_updates.cpp")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_storage_escapes.h")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_storage_escapes.cpp")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_storage_struct.h")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_storage_struct.cpp")

# required-libraries
list (APPEND WSJCPP_LIBRARIES "-lpthread")

# required-pkg-config
## CURL
FIND_PACKAGE(CURL)
IF(CURL_FOUND)
   list (APPEND WSJCPP_INCLUDE_DIRS ${CURL_INCLUDE_DIR})
   list (APPEND WSJCPP_LIBRARIES ${CURL_LIBRARIES})
ELSE(CURL_FOUND)
   MESSAGE(FATAL_ERROR "Could not find the CURL library and development files.")
ENDIF(CURL_FOUND)
## PNG
FIND_PACKAGE(PNG)
IF(PNG_FOUND)
   list (APPEND WSJCPP_INCLUDE_DIRS ${PNG_INCLUDE_DIR})
   list (APPEND WSJCPP_LIBRARIES ${PNG_LIBRARIES})
ELSE(PNG_FOUND)
   MESSAGE(FATAL_ERROR "Could not find the PNG library and development files.")
ENDIF(PNG_FOUND)
## ZLIB
FIND_PACKAGE(ZLIB)
IF(ZLIB_FOUND)
   list (APPEND WSJCPP_INCLUDE_DIRS ${ZLIB_INCLUDE_DIR})
   list (APPEND WSJCPP_LIBRARIES ${ZLIB_LIBRARIES})
ELSE(ZLIB_FOUND)
   MESSAGE(FATAL_ERROR "Could not find the ZLIB library and development files.")
ENDIF(ZLIB_FOUND)

include(${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.custom.txt)

############################
##### mysql 
# Find and make sure the system have the header file
find_path(MYSQL_HEADER mysql/mysql.h)
if(MYSQL_HEADER STREQUAL "MYSQL_HEADER-NOTFOUND")
    message(FATAL_ERROR "Could not find the mysql/mysql.h header file: (ubuntu: apt install libmysqlclient-dev) or (debian: apt install default-libmariadbclient-dev and link: ln -s /usr/lib/x86_64-linux-gnu/pkgconfig/mariadb.pc /usr/lib/x86_64-linux-gnu/pkgconfig/mysqlclient.pc)")
endif()

include(FindPkgConfig)
pkg_check_modules(LIBMYSQLCLIENT REQUIRED mysqlclient)

foreach(FLAG ${LIBMYSQLCLIENT_CFLAGS_OTHER})
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${FLAG}")
endforeach()

list (APPEND WSJCPP_INCLUDE_DIRS ${LIBMYSQLCLIENT_LIBRARY_DIRS})
list (APPEND WSJCPP_LIBRARIES ${LIBMYSQLCLIENT_LIBRARIES})
#####
############################

include_directories(${WSJCPP_INCLUDE_DIRS})

add_executable ("unit-tests" ${WSJCPP_SOURCES})

target_link_libraries("unit-tests" -lpthread ${WSJCPP_LIBRARIES} )

install(
    TARGETS
        "unit-tests"
    RUNTIME DESTINATION
        /usr/bin
)

