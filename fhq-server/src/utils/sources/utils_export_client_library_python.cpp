#include <utils_export_client_library_python.h>
#include <iostream>
#include <iomanip>
#include <algorithm>
#include <websocketserver.h>
#include <employees.h>
#include <QtCore> // TODO remove

void UtilsExportClientLibraryPython::exportLib(){
    std::string idt = "    ";

    QCoreApplication::applicationVersion().toStdString();

    struct PyIL {
        std::string mLine;
        PyIL *mParent = NULL;
        std::vector<PyIL *> vLines;

        PyIL(){
            mParent = NULL;
            mLine = "";
        }

        PyIL(PyIL *parent, const std::string &line){
            mParent = parent;
            mLine = line;
        }
        PyIL &add(const std::string &line){
            vLines.push_back(new PyIL(this,line));
            return *this;
        }
        PyIL &sub(const std::string &line){
            PyIL *p = new PyIL(this,line);
            vLines.push_back(p);
            return *p;
        }
        PyIL &end(){
            return *mParent;
        }

        void print(std::string intent = ""){
            if(mParent != NULL){
                std::cout << intent << mLine << std::endl;
                intent += "    ";
            }
            for(int i = 0; i < vLines.size(); i++){
                vLines[i]->print(intent);
            }
        }
    };

    PyIL root = PyIL()
    .add("# -*- coding: utf-8 -*-")
    .add("### This file was automatically generated by fhq-server");

    root.add("### Version: " + QCoreApplication::applicationVersion().toStdString());
    root.add("### Date: some");
    root.add("");
    // imports
    root.add("import json");
    root.add("import functools");
    root.add("import websocket");
    root.add("import time");
    root.add("import Queue");
    root.add("import select");
    root.add("from threading import Thread");
    root.add("")

    .sub("class FHQCliRecvThread(Thread):")
        .add("__ws = None;")
        .add("__sendCommandQueue = Queue.Queue();")
        .add("__cmd_results = {};")
        .add("do_run = True;")
        .add("__url = None;")
        .add("__messageId = 0;")
        .add("")
        .sub("def __init__(self, url):")
            .add("Thread.__init__(self)")
            .add("self.__url = url;")
            .end()
        .add("")
        .sub("def run(self):")
            .add("print('[FHQCliThread] Connecting to ' + self.__url)")
            .sub("try:")
                .add("self.__ws = websocket.create_connection(self.__url)")
                .end()
            .sub("except:")
                .add("print('Failed connect to '' + self.__url)")
                .add("self.__ws = None")
                .add("return")
                .end()
            .add("# self.__ws.setblocking(0)")
            .add("print('[FHQCliThread] Connected');")
            .sub("while(self.do_run):")
                .sub("while not self.__sendCommandQueue.empty():")
                    .add("requestJson = self.__sendCommandQueue.get();")
                    .add("requestText = json.dumps(requestJson);")
                    .add("# print('requestText: ' + requestText);")
                    .add("self.__ws.send(requestText)")
                    .end()
                .add("ready = select.select([self.__ws], [], [], 0.1)")
                .sub("if ready[0]:")
                    .add("responseText =  self.__ws.recv()")
                    .add("responseJson = json.loads(responseText)")
                    .add("cmd_m = responseJson['m'];")
                    .add("self.__cmd_results[cmd_m] = json.loads(responseText);")
                    .add("# print(responseText)")
                    .end()
                .add("time.sleep(0.5)")
                .end()
            .add("print('[FHQCliThread] Stopping...');")
            .add("self.__ws.close()")
            .add("self.__ws = None")
            .add("print('[FHQCliThread] Stopped');")
            .end()
        .add("")
        .sub("def addToSendQueue(self, requestJson):")
            .add("self.__sendCommandQueue.put(requestJson);")
            .add("return requestJson['m'];")
            .end()
        .add("")
        .sub("def generateBaseCommand(self, cmd):")
            .add("self.__messageId = self.__messageId + 1;")
            .add("requestJson = {};")
            .add("msgId = 'm' + str(self.__messageId);")
            .add("requestJson['m'] = msgId;")
            .add("requestJson['cmd'] = cmd;")
            .add("return requestJson;")
            .end()
        .add("")
        .sub("def hasCmdResult(self, cmd_m):")
            .add("return cmd_m in self.__cmd_results;")
            .end()
        .add("")
        .sub("def getCmdResult(self, cmd_m):")
            .add("return self.__cmd_results[cmd_m]")
            .end()
        .add("")
        .sub("def removeCmdResult(self, cmd_m):")
            .add("self.__cmd_results.pop(cmd_m, None)")
            .end()
        .add("")
        .sub("def hasConnection(self):")
            .add("return self.__ws != None")
            .end()
        .end()
    .add("")
    .sub("class FHQCli:")
        .add("# __ws = None;")
        .add("__url = 'ws://localhost:1234/';")
        .add("__recvThread = None")
        .sub("def __init__(self, url):")
            .add("self.__url = url")
            .add("self.connect();")
            .end()
        .add("")
        .sub("def __enter__(self):")
            .add("return self")
            .end()
        .add("")
        .sub("def __exit__(self, exc_type, exc_value, traceback):")
            .add("self.__recvThread.do_run = False;")
            .end()
        .add("")
        .sub("def close(self):")
            .add("self.__recvThread.do_run = False;")
            .end()
        .add("")
        .sub("def setUrl(self, url):")
            .add("self.__url = url;")
            .end()
        .add("")
        .sub("def getUrl(self):")
            .add("return self.__url;")
            .end()
        .add("")
        .sub("def connect(self):")
            .add("self.__recvThread = FHQCliRecvThread(self.__url)")
            .add("self.__recvThread.start()")
            .add("# self.__recvThread.join()")
            .add("# print('FHQCli: Thread started');")
            .add("return True;")
            .end()
        .add("")
        .sub("def __looper(self, cmd_m):")
            .add("max_time = 5*10; # 5 seconds")
            .add("counter_time = 0;")
            .add("cmd_result = {};")
            .sub("while True:")
                .add("counter_time = counter_time + 1;")
                .sub("if self.__recvThread.hasCmdResult(cmd_m):")
                    .add("cmd_result = self.__recvThread.getCmdResult(cmd_m);")
                    .add("self.__recvThread.removeCmdResult(cmd_m);")
                    .add("break;")
                    .end()
                .sub("if counter_time > max_time:")
                    .add("cmd_result = None")
                    .add("break;")
                    .end()
                .add("time.sleep(0.2)")
                .end()
            .add("return cmd_result;")
            .end()
        .add("")
        .sub("def login(self, email, password):")
            .add("if not self.__recvThread.hasConnection(): return None")
            .add("requestJson = self.__recvThread.generateBaseCommand('login')")
            .add("requestJson['email'] = email;")
            .add("requestJson['password'] = password;")
            .add("cmd_m = self.__recvThread.addToSendQueue(requestJson);")
            .add("return self.__looper(cmd_m);")
            .end()
        .add("")
        .sub("def admin_user_create(self, email, nick, password, role, university):")
            .add("if not self.__recvThread.hasConnection(): return None")
            .add("requestJson = self.__recvThread.generateBaseCommand('user_create')")
            .add("requestJson['email'] = email;")
            .add("requestJson['nick'] = nick;")
            .add("requestJson['role'] = role;")
            .add("requestJson['password'] = password;")
            .add("requestJson['university'] = university;")
            .add("cmd_m = self.__recvThread.addToSendQueue(requestJson);")
            .add("return self.__looper(cmd_m);")
            .end()
        .add("")
        .sub("def scoreboard(self):")
            .add("if not self.__recvThread.hasConnection(): return None")
            .add("requestJson = self.__recvThread.generateBaseCommand('scoreboard')")
            .add("requestJson['page'] = 0;")
            .add("requestJson['onpage'] = 10;")
            .add("cmd_m = self.__recvThread.addToSendQueue(requestJson);")
            .add("return self.__looper(cmd_m);")
            .end()
        .end()
    .end()
     ;



    root.print();
    return;
}
