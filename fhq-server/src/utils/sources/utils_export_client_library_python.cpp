#include <utils_export_client_library_python.h>
#include <iostream>
#include <iomanip>
#include <algorithm>
#include <websocketserver.h>
#include <employees.h>
#include <QtCore> // TODO remove

void UtilsExportClientLibraryPython::exportLib(){
    std::string idt = "    ";

    QCoreApplication::applicationVersion().toStdString();

    struct PyIL {
        std::string mLine;
        PyIL *mParent = NULL;
        std::vector<PyIL *> vLines;

        PyIL(){
            mParent = NULL;
            mLine = "";
        }

        PyIL(PyIL *parent, const std::string &line){
            mParent = parent;
            mLine = line;
        }
        PyIL &add(const std::string &line){
            vLines.push_back(new PyIL(this,line));
            return *this;
        }
        PyIL &sub(const std::string &line){
            PyIL *p = new PyIL(this,line);
            vLines.push_back(p);
            return *p;
        }
        PyIL &parent(){
            return *mParent;
        }

        void print(std::string intent){
            if(mParent != NULL){
                std::cout << intent << mLine << std::endl;
                intent += "    ";
            }
            for(int i = 0; i < vLines.size(); i++){
                vLines[i]->print(intent);
            }
        }
    };

    PyIL root;
     root
        .add("# -*- coding: utf-8 -*-")
        .add("### This file was automatically generated by fhq-server");
    root.add("### Version: " + QCoreApplication::applicationVersion().toStdString());
    root.add("### Date: some");
    root.add("");
    // imports
    root.add("import json");
    root.add("import functools");
    root.add("import websocket");
    root.add("import time");
    root.add("import Queue");
    root.add("import select");
    root.add("from threading import Thread");
    root.add("");

    root.sub("class FHQCliRecvThread(Thread):")
            .add("__ws = None;")
            .add("__sendCommandQueue = Queue.Queue();")
            .add("__callbacks = {};")
            .add("do_run = True;")
            .add("__url = None;")
            .add("__messageId = 0;")
            .add("")
            .sub("def __init__(self, url):")
                .add("Thread.__init__(self)")
                .add("self.__url = url;")
                .parent()
            .add("")
            .sub("def run(self):")
                .add("print('[FHQCliThread] Connecting to ' + self.__url)")
                .add("self.__ws = websocket.create_connection(self.__url);")
                .add("# self.__ws.setblocking(0)")
                .add("print('[FHQCliThread] Connected');")
                .add("while(self.do_run):")
     ;



    root.print("");

    std::cout
        << idt << "def run(self):\n"
        << idt << idt << "print('[FHQCliThread] Connecting to ' + self.__url)\n"

        << "            while not self.__sendCommandQueue.empty():\n"
        << "                requestJson = self.__sendCommandQueue.get();\n"
        << "                requestText = json.dumps(requestJson);\n"
        << "                # print('requestText: ' + requestText);\n"
        << "                self.__ws.send(requestText)\n"
        << "\n"
        << "            ready = select.select([self.__ws], [], [], 0.1)\n"
        << "            if ready[0]:\n"
        << "                responseText =  self.__ws.recv()\n"
        << "                responseJson = json.loads(responseText)\n"
        << "                cmd_m = responseJson['m'];\n"
        << "                self.__cmd_results[cmd_m] = json.loads(responseText);\n"
        << "                # print(responseText)\n"
        << "\n"
        << "            time.sleep(0.5)\n"
        << idt << idt << "print('[FHQCliThread] Stopping...');\n"
        << idt << idt << "self.__ws.close();\n"
        << idt << idt << "print('[FHQCliThread] Stopped');\n"
        << "\n"
        << idt << "def addToSendQueue(self, requestJson):\n"
        << idt << idt << "self.__sendCommandQueue.put(requestJson);\n"
        << idt << idt << "return requestJson['m'];\n"
        << "\n"
        << idt << "def generateBaseCommand(self, cmd):\n"
        << idt << idt << "self.__messageId = self.__messageId + 1;\n"
        << idt << idt << "requestJson = {};\n"
        << idt << idt << "msgId = 'm' + str(self.__messageId);\n"
        << idt << idt << "requestJson['m'] = msgId;\n"
        << idt << idt << "requestJson['cmd'] = cmd;\n"
        << idt << idt << "return requestJson;\n"
        << "\n"
        << idt << "def hasCmdResult(self, cmd_m):\n"
        << idt << idt << "return cmd_m in self.__cmd_results;\n"
        << "\n"
        << idt << "def getCmdResult(self, cmd_m):\n"
        << idt << idt << "return self.__cmd_results[cmd_m]\n"
        << "\n"
        << idt << "def removeCmdResult(self, cmd_m):\n"
        << idt << idt << "self.__cmd_results.pop(cmd_m, None)\n"
        << "\n"
        << "class FHQCli:\n"
        << idt << "# __ws = None;\n"
        << idt << "__url = 'ws://localhost:1234/';\n"
        << idt << "__recvThread = None\n"
        << idt << "def __init__(self, url):\n"
        << idt << idt << "self.__url = url;\n"
        << idt << idt << "self.connect();\n"
        << "\n"
        << idt << "def __enter__(self):\n"
        << idt << idt << "return self\n"
        << "\n"
        << idt << "def __exit__(self, exc_type, exc_value, traceback):\n"
        << idt << idt << "self.__recvThread.do_run = False;\n"
        << "\n"
        << idt << "def close(self):\n"
        << idt << idt << "self.__recvThread.do_run = False;\n"
        << "\n"
        << idt << "def setUrl(self, url):\n"
        << idt << idt << "self.__url = url;\n"
        << "\n"
        << idt << "def getUrl(self):\n"
        << idt << idt << "return self.__url;\n"
        << "\n"
        << idt << "def connect(self):\n"
        << idt << idt << "self.__recvThread = FHQCliRecvThread(self.__url)\n"
        << idt << idt << "self.__recvThread.start()\n"
        << idt << idt << "# self.__recvThread.join()\n"
        << idt << idt << "# print('FHQCli: Thread started');\n"
        << idt << idt << "return True;\n"
        << "\n"
        << idt << "def __looper(self, cmd_m):\n"
        << idt << idt << "max_time = 5*10; # 5 seconds\n"
        << idt << idt << "counter_time = 0;\n"
        << idt << idt << "cmd_result = {};\n"
        << idt << idt << "while True:\n"
        << idt << idt << idt << "counter_time = counter_time + 1;\n"
        << "            if self.__recvThread.hasCmdResult(cmd_m):\n"
        << "                cmd_result = self.__recvThread.getCmdResult(cmd_m);\n"
        << "                self.__recvThread.removeCmdResult(cmd_m);\n"
        << "                break;\n"
        << "            if counter_time > max_time:\n"
        << "                cmd_result = None\n"
        << "                break;\n"
        << "            time.sleep(0.2)\n"
        << idt << idt << "return cmd_result;\n"
        << "\n"
        << idt << "def login(self, email, password):\n"
        << idt << idt << "requestJson = self.__recvThread.generateBaseCommand('login')\n"
        << idt << idt << "requestJson['email'] = email;\n"
        << idt << idt << "requestJson['password'] = password;\n"
        << idt << idt << "cmd_m = self.__recvThread.addToSendQueue(requestJson);\n"
        << idt << idt << "return self.__looper(cmd_m);\n"
        << "\n"
        << idt << "def admin_user_create(self, email, nick, password, role, university):\n"
        << idt << idt << "requestJson = self.__recvThread.generateBaseCommand('user_create')\n"
        << idt << idt << "requestJson['email'] = email;\n"
        << idt << idt << "requestJson['nick'] = nick;\n"
        << idt << idt << "requestJson['role'] = role;\n"
        << idt << idt << "requestJson['password'] = password;\n"
        << idt << idt << "requestJson['university'] = university;\n"
        << idt << idt << "cmd_m = self.__recvThread.addToSendQueue(requestJson);\n"
        << idt << idt << "return self.__looper(cmd_m);\n"
        << "\n"
        << idt << "def scoreboard(self):\n"
        << idt << idt << "requestJson = self.__recvThread.generateBaseCommand('scoreboard')\n"
        << idt << idt << "requestJson['page'] = 0;\n"
        << idt << idt << "requestJson['onpage'] = 10;\n"
        << idt << idt << "cmd_m = self.__recvThread.addToSendQueue(requestJson);\n"
        << idt << idt << "return self.__looper(cmd_m);\n";

    std::cout << "\n\n";
  return;
}
