#include <utils_export_client_library_python.h>

#include <iostream>
#include <iomanip>
#include <algorithm>
#include <websocketserver.h>
#include <employees.h>
#include <QtCore> // TODO remove


#include <memory>

class PyCodeLine{
    
    PyCodeLine *m_pParent;
    std::string m_sLine;
    std::vector<PyCodeLine *> m_vLines;
public:
    
    PyCodeLine(){
        m_pParent = NULL;
        m_sLine = "";
    }

    PyCodeLine(PyCodeLine *parent, const std::string &sLine){
        m_pParent = parent;
        m_sLine = sLine;
    }

    ~PyCodeLine(){
        if(m_pParent == NULL){
            std::cout << "destruct root \n";
        }else{
            std::cout << "destruct something else [" << m_sLine << "]\n";
        }
    }

    PyCodeLine *addLine(const std::string &sLine){
        PyCodeLine *pPyCodeLine = new PyCodeLine(this,sLine);
        m_vLines.push_back(pPyCodeLine);
        return pPyCodeLine;
    }

    PyCodeLine *getParent(){
        return m_pParent;
    }

    std::string getLine(){
        return m_sLine;
    }

    PyCodeLine *findRoot(){
        if(m_pParent == NULL){
            return this;
        }
        return m_pParent->findRoot();
    }

    void print(std::string intent = ""){
        if(m_pParent != NULL){
            std::cout << intent << m_sLine << std::endl;
            intent += "    ";
        }
        for(int i = 0; i < m_vLines.size(); i++){
            m_vLines[i]->print(intent);
        }
    }
};


class PyCodeBuilder {

private:
    PyCodeLine *m_pCurr = NULL;

public:
    PyCodeBuilder(){
        m_pCurr = new PyCodeLine();
    }

    ~PyCodeBuilder(){
        // std::cout << "destruct something else [" << m_pCurr->getLine() << "]\n";
    }

    PyCodeBuilder &add(const std::string &sLine){
        m_pCurr->addLine(sLine);
        return *this;
    }
    PyCodeBuilder &sub(const std::string &sLine){
        m_pCurr = m_pCurr->addLine(sLine);
        return *this;
    }
    PyCodeBuilder &end(){
        PyCodeLine *p = m_pCurr->getParent();
        if(p != NULL){
            m_pCurr = p;
        }else{
            std::cout << "Wrong called end function" << std::endl;
        }
        return *this;
    }

    void print(){
        PyCodeLine *pRoot = m_pCurr->findRoot();
        pRoot->print();
    };
};

void UtilsExportClientLibraryPython::exportLib(){
    
    PyCodeBuilder builder;
    builder
    .add("# -*- coding: utf-8 -*-")
    .add("### This file was automatically generated by fhq-server")
    .add("### Version: " + QCoreApplication::applicationVersion().toStdString())
    .add("### Date: some")
    .add("")
    .add("import json")
    .add("import functools")
    .add("import websocket")
    .add("import time")
    .add("import Queue")
    .add("import select")
    .add("from threading import Thread")
    .add("")
    .sub("class FHQCliRecvThread(Thread):")
        .add("__ws = None;")
        .add("__sendCommandQueue = Queue.Queue();")
        .add("__cmd_results = {};")
        .add("do_run = True;")
        .add("__url = None;")
        .add("__messageId = 0;")
        .add("")
        .sub("def __init__(self, url):")
            .add("Thread.__init__(self)")
            .add("self.__url = url;")
            .end()
        .add("")
        .sub("def run(self):")
            .add("print('[FHQCliThread] Connecting to ' + self.__url)")
            .sub("try:")
                .add("self.__ws = websocket.create_connection(self.__url)")
                .end()
            .sub("except:")
                .add("print('Failed connect to ' + self.__url)")
                .add("self.__ws = None")
                .add("return")
                .end()
            .add("# self.__ws.setblocking(0)")
            .add("print('[FHQCliThread] Connected');")
            .sub("while(self.do_run):")
                .sub("while not self.__sendCommandQueue.empty():")
                    .add("requestJson = self.__sendCommandQueue.get();")
                    .add("requestText = json.dumps(requestJson);")
                    .add("# print('requestText: ' + requestText);")
                    .add("self.__ws.send(requestText)")
                    .end()
                .add("ready = select.select([self.__ws], [], [], 0.1)")
                .sub("if ready[0]:")
                    .add("responseText =  self.__ws.recv()")
                    .add("responseJson = json.loads(responseText)")
                    .add("cmd_m = responseJson['m'];")
                    .add("self.__cmd_results[cmd_m] = json.loads(responseText);")
                    .add("# print(responseText)")
                    .end()
                .add("time.sleep(0.5)")
                .end()
            .add("print('[FHQCliThread] Stopping...');")
            .add("self.__ws.close()")
            .add("self.__ws = None")
            .add("print('[FHQCliThread] Stopped');")
            .end()
        .add("")
        .sub("def addToSendQueue(self, requestJson):")
            .add("self.__sendCommandQueue.put(requestJson);")
            .add("return requestJson['m'];")
            .end()
        .add("")
        .sub("def generateBaseCommand(self, cmd):")
            .add("self.__messageId = self.__messageId + 1;")
            .add("requestJson = {};")
            .add("msgId = 'm' + str(self.__messageId);")
            .add("requestJson['m'] = msgId;")
            .add("requestJson['cmd'] = cmd;")
            .add("return requestJson;")
            .end()
        .add("")
        .sub("def hasCmdResult(self, cmd_m):")
            .add("return cmd_m in self.__cmd_results;")
            .end()
        .add("")
        .sub("def getCmdResult(self, cmd_m):")
            .add("return self.__cmd_results[cmd_m]")
            .end()
        .add("")
        .sub("def removeCmdResult(self, cmd_m):")
            .add("self.__cmd_results.pop(cmd_m, None)")
            .end()
        .add("")
        .sub("def hasConnection(self):")
            .add("return self.__ws != None")
            .end()
        .end()
    .add("")
    .sub("class FHQCli:")
        .add("# __ws = None;")
        .add("__url = 'ws://localhost:1234/';")
        .add("__recvThread = None")
        .sub("def __init__(self, url):")
            .add("self.__url = url")
            .add("self.connect();")
            .end()
        .add("")
        .sub("def __enter__(self):")
            .add("return self")
            .end()
        .add("")
        .sub("def __exit__(self, exc_type, exc_value, traceback):")
            .add("self.__recvThread.do_run = False;")
            .end()
        .add("")
        .sub("def close(self):")
            .add("self.__recvThread.do_run = False;")
            .end()
        .add("")
        .sub("def setUrl(self, url):")
            .add("self.__url = url;")
            .end()
        .add("")
        .sub("def getUrl(self):")
            .add("return self.__url;")
            .end()
        .add("")
        .sub("def connect(self):")
            .add("self.__recvThread = FHQCliRecvThread(self.__url)")
            .add("self.__recvThread.start()")
            .add("# self.__recvThread.join()")
            .add("# print('FHQCli: Thread started');")
            .add("return True;")
            .end()
        .add("")
        .sub("def __looper(self, cmd_m):")
            .add("max_time = 5*10; # 5 seconds")
            .add("counter_time = 0;")
            .add("cmd_result = {};")
            .sub("while True:")
                .add("counter_time = counter_time + 1;")
                .sub("if self.__recvThread.hasCmdResult(cmd_m):")
                    .add("cmd_result = self.__recvThread.getCmdResult(cmd_m);")
                    .add("self.__recvThread.removeCmdResult(cmd_m);")
                    .add("break;")
                    .end()
                .sub("if counter_time > max_time:")
                    .add("cmd_result = None")
                    .add("break;")
                    .end()
                .add("time.sleep(0.2)")
                .end()
            .add("return cmd_result;")
            .end()
        .add("");

    std::map<std::string, CmdHandlerBase*>::iterator it = g_pCmdHandlers->begin();
    for (; it!=g_pCmdHandlers->end(); ++it){
        std::string sCmd = it->first;
        CmdHandlerBase* pCmdHandlerBase = it->second;
        builder
        .add("# Access unauthorized " + std::string(pCmdHandlerBase->access().accessUnauthorized() ? "yes" : "no"))
        .add("# Acess user " + std::string(pCmdHandlerBase->access().accessUser() ? "yes" : "no"))
        .add("# Access admin " + std::string(pCmdHandlerBase->access().accessAdmin() ? "yes" : "no"));

        
        std::vector<CmdInputDef> vVin = pCmdHandlerBase->inputs();
        for(int i = 0; i < vVin.size(); i++){
            CmdInputDef inDef = vVin[i];
            std::string nameIn = std::string(inDef.getName());
            builder.add("# " + nameIn + " - " + inDef.getType() + ", " + inDef.getRestrict() + " (" + inDef.getDescription() + ")" );
        }

        builder
        .sub("def " + sCmd + "(self, req):")
            .add("if not self.__recvThread.hasConnection(): return None")
            .add("requestJson = self.__recvThread.generateBaseCommand('" + sCmd + "')");

        for(int i = 0; i < vVin.size(); i++){
            std::string nameIn = std::string(vVin[i].getName());
            builder
            .sub("if req['" + nameIn + "'] != None: ")
                .add("requestJson['" + nameIn + "'] = req['" + nameIn + "']")
                .end();
        }

        builder
            .add("cmd_m = self.__recvThread.addToSendQueue(requestJson);")
            .add("return self.__looper(cmd_m);")
            .end()
        .add("");
    }
    builder.end();
    builder.print();
    
    // pycode
        
        /*.sub("def login(self, email, password):")
            .add("if not self.__recvThread.hasConnection(): return None")
            .add("requestJson = self.__recvThread.generateBaseCommand('login')")
            .add("requestJson['email'] = email;")
            .add("requestJson['password'] = password;")
            .add("cmd_m = self.__recvThread.addToSendQueue(requestJson);")
            .add("return self.__looper(cmd_m);")
            .end()
        .add("")
        .sub("def admin_user_create(self, email, nick, password, role, university):")
            .add("if not self.__recvThread.hasConnection(): return None")
            .add("requestJson = self.__recvThread.generateBaseCommand('user_create')")
            .add("requestJson['email'] = email;")
            .add("requestJson['nick'] = nick;")
            .add("requestJson['role'] = role;")
            .add("requestJson['password'] = password;")
            .add("requestJson['university'] = university;")
            .add("cmd_m = self.__recvThread.addToSendQueue(requestJson);")
            .add("return self.__looper(cmd_m);")
            .end()
        .add("")
        .sub("def scoreboard(self):")
            .add("if not self.__recvThread.hasConnection(): return None")
            .add("requestJson = self.__recvThread.generateBaseCommand('scoreboard')")
            .add("requestJson['page'] = 0;")
            .add("requestJson['onpage'] = 10;")
            .add("cmd_m = self.__recvThread.addToSendQueue(requestJson);")
            .add("return self.__looper(cmd_m);")
            .end()
        .end()
    .end()*/
     ;

    return;
}
